{
  "identifier": "CVE-2017-7525",
  "vulnerabilityLink": "http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-7525",
  "source": {
    "shortName": "CVE",
    "longName": "National Vulnerability Database"
  },
  "mainSeverity": {
    "source": "cve_cvss_3",
    "score": 9.8,
    "vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
  },
  "severityScores": [
    {
      "source": "cve_cvss_2",
      "score": 7.5
    },
    {
      "source": "sonatype_cvss_3",
      "score": 8.5
    }
  ],
  "weakness": {
    "cweSource": "CVE",
    "cweIds": [
      {
        "id": "502",
        "uri": "https://cwe.mitre.org/data/definitions/502.html"
      }
    ]
  },
  "categories": [
    "data"
  ],
  "description": "A deserialization flaw was discovered in the jackson-databind, versions before 2.6.7.1, 2.7.9.1 and 2.8.9, which could allow an unauthenticated user to perform code execution by sending the maliciously crafted input to the readValue method of the ObjectMapper.",
  "explanationMarkdown": "`jackson-databind` is vulnerable to Remote Code Execution (RCE). The `createBeanDeserializer()` function in the `BeanDeserializerFactory` class allows untrusted Java objects to be deserialized. A remote attacker can exploit this by uploading a malicious serialized object that will result in RCE if the application attempts to deserialize it.\r\n\r\nNOTE: This vulnerability is also tracked by the Apache Struts team as [S2-055](https://cwiki.apache.org/confluence/display/WW/S2-055).",
  "detectionMarkdown": "The application is vulnerable by using this component, when default typing is enabled.\r\n\r\nNote: Spring Security has provided their own fix for this vulnerability ([CVE-2017-4995](https://pivotal.io/security/cve-2017-4995)). If this component is being used as part of Spring Security, then you are not vulnerable if you are running Spring Security 4.2.3.RELEASE or greater for 4.x or Spring Security 5.0.0.M2 or greater for 5.x.",
  "recommendationMarkdown": "There is no non vulnerable version of this component. Despite there being a fix provided by Jackson, it uses a black-list approach. If there is another class not black-listed which performs deserialization on the classpath, then this may lead to code execution. We recommend investigating alternative components or a potential mitigating control.\r\n\r\nWorkaround: Do not use the default typing. Instead you will need to implement your own.\r\n\r\n>It is also possible to customize global defaulting, using ObjectMapper.setDefaultTyping(...) -- you just have to implement your own TypeResolverBuilder (which is not very difficult); and by doing so, can actually configure all aspects of type information. Builder itself is just a short-cut for building actual handlers.\r\n\r\nReference: [https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization](https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization)\r\n\r\nExamples of implementing your own typing can be found by looking at [Spring Security's fix](https://github.com/spring-projects/spring-security/commit/947d11f433b78294942cb5ea56e8aa5c3a0ca439) or [this Stack Overflow article](https://stackoverflow.com/questions/12353774/how-to-customize-jackson-type-information-mechanism).",
  "advisories": [
    {
      "referenceType": "PROJECT",
      "url": "https://github.com/FasterXML/jackson-databind/issues/1599"
    },
    {
      "referenceType": "THIRD_PARTY",
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-7525"
    }
  ]
}
